<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
<title>西洋占星術クイズ｜全星座×全惑星×全ハウス×全アスペクト</title>
<style>
:root{--bg:#0b0f14;--panel:#121822;--ink:#e9eef5;--muted:#9bb0c3;--accent:#7cc9ff;--good:#67e3a3;--bad:#ff7a7a;--btn:#1b2533;--line:#213044;--warn:#f6d36b}
*{box-sizing:border-box} html,body{margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,"Hiragino Sans","Noto Sans JP",sans-serif}
header{position:sticky;top:0;background:linear-gradient(180deg,#0b0f14 70%,#0b0f14cc);backdrop-filter:blur(6px);z-index:5;border-bottom:1px solid var(--line)}
.container{max-width:1000px;margin:0 auto;padding:14px}
h1{font-size:20px;margin:0 0 6px} small{color:var(--muted)}
.panel{background:var(--panel);border:1px solid var(--line);border-radius:12px;padding:14px;margin:12px 0}
.grid{display:grid;gap:10px} @media(min-width:760px){.grid{grid-template-columns:1fr 1fr}}
label{display:block;margin:6px 0;color:var(--muted)}
select,input[type=number]{width:100%;padding:10px;border-radius:10px;border:1px solid var(--line);background:#0e1520;color:var(--ink)}
.btn{display:inline-block;padding:12px 14px;border-radius:12px;border:1px solid var(--line);background:#1b2533;color:var(--ink);text-decoration:none;font-weight:600}
.btn.primary{background:var(--accent);color:#001425;border-color:#60b9fb}
.btn.good{background:var(--good);color:#012915;border-color:#39cf88}
.btn.warn{background:var(--warn);color:#2c2000;border-color:#eac252}
.row{display:flex;gap:10px;flex-wrap:wrap}
.kbd{font-family:ui-monospace,Consolas,monospace;background:#0e1520;border:1px solid var(--line);padding:2px 6px;border-radius:6px;color:var(--muted)}
.qcard{background:#0f141d;border:1px solid var(--line);border-radius:14px;padding:14px}
.q{font-size:18px;margin:0 0 8px}
.choices{display:grid;gap:8px;margin-top:8px}
.choice{padding:12px;border:1px solid var(--line);border-radius:12px;background:#0d1724;cursor:pointer}
.choice.correct{border-color:#2b5;box-shadow:0 0 0 2px #2b5 inset}
.choice.wrong{border-color:#c33;box-shadow:0 0 0 2px #c33 inset}
.explain{margin-top:10px;color:var(--muted)}
.progress{height:8px;background:#0d1622;border-radius:999px;overflow:hidden;border:1px solid var(--line)}
.progress>i{display:block;height:100%;width:0;background:linear-gradient(90deg,#60b9fb,#7cc9ff)}
.stat{display:flex;gap:12px;align-items:center}
.tag{font-size:12px;padding:4px 8px;border-radius:999px;border:1px solid var(--line);background:#0e1520;color:var(--muted)}
.badge{padding:2px 6px;border-radius:6px;border:1px solid var(--line);background:#0e1520;color:var(--muted)}
.help{font-size:14px;color:var(--muted)}
.warnbar{display:none;background:#2c2000;border:1px solid #eac252;color:#f6d36b;padding:8px 10px;border-radius:10px;margin:8px 0}
hr.sep{border:none;border-top:1px dashed var(--line);margin:14px 0}
footer{color:var(--muted);text-align:center;padding:36px 12px}
#toast{position:fixed;bottom:18px;left:50%;transform:translateX(-50%);background:#0e1520;border:1px solid var(--line);padding:10px 14px;border-radius:10px;opacity:0;transition:opacity .25s;z-index:10}
#toast.show{opacity:1}
</style>
</head>
<body>
<header>
  <div class="container row" style="justify-content:space-between;align-items:center">
    <div>
      <h1>西洋占星術クイズ｜全網羅ジェネレーター</h1>
      <small>全星座×全惑星×全ハウス×全アスペクト｜スマホ最適化・オフライン可</small>
      <div id="warn" class="warnbar"></div>
    </div>
    <div class="row">
      <button class="btn" id="btnReview">復習（間違い）</button>
      <button class="btn" id="btnGuide">⚙ 問題編集ガイド</button>
    </div>
  </div>
</header>

<main class="container">
  <section class="panel">
    <h2 style="margin:0 0 6px">出題設定</h2>
    <div class="grid">
      <div>
        <label>カテゴリ（複数可）</label>
        <div class="row" id="catBox"></div>
      </div>
      <div>
        <label>出題数</label>
        <input id="count" type="number" min="3" max="200" value="20">
      </div>
    </div>
    <div class="row" style="margin-top:10px">
      <button class="btn primary" id="start">クイズ開始</button>
      <button class="btn" id="resetData" title="スコアと間違い帳を削除">記録をリセット</button>
      <span class="badge">スコア保存: <b id="saved">0</b>回</span>
      <span class="badge">総生成可能問数: <b id="capacity">0</b></span>
    </div>
    <p class="help">操作：選択肢タップ→即採点→解説表示。「次へ」で進む／終了後に正答率表示。<br>※ 自動生成カテゴリをONにすると“組み合わせ”が網羅されます。</p>
  </section>

  <section id="quizArea" class="panel" style="display:none">
    <div class="row" style="justify-content:space-between;align-items:center">
      <div class="stat"><div class="tag" id="tagCat">カテゴリ</div><div class="tag" id="counter">1/10</div></div>
      <div class="stat"><div class="tag" id="scoreTag">正解 0</div></div>
    </div>
    <div class="progress" style="margin:10px 0 14px"><i id="bar"></i></div>
    <div class="qcard">
      <div class="q" id="question">ここに問題が表示されます</div>
      <div class="choices" id="choices"></div>
      <div class="explain" id="explain" style="display:none"></div>
    </div>
    <div class="row" style="margin-top:12px;justify-content:space-between">
      <button class="btn" id="prev">← 戻る</button>
      <div class="row">
        <button class="btn warn" id="flag">要復習に追加</button>
        <button class="btn good" id="next">次へ →</button>
      </div>
    </div>
  </section>

  <section id="resultArea" class="panel" style="display:none">
    <h2 style="margin:0 0 6px">結果</h2>
    <p class="help" id="resultText"></p>
    <div class="row">
      <button class="btn primary" id="again">同じ設定で再挑戦</button>
      <button class="btn" id="toTop">設定に戻る</button>
    </div>
    <hr class="sep">
    <details>
      <summary>この回の全問（正解・解説付き）</summary>
      <div id="reviewList" style="margin-top:10px"></div>
    </details>
  </section>

  <section id="guide" class="panel" style="display:none">
    <h3 style="margin:0 0 8px">問題編集ガイド</h3>
    <ol>
      <li>辞書 <span class="kbd">DB</span> を編集すると、全自動で問題が再生成されます。</li>
      <li>カテゴリは下の <span class="kbd">CATS</span>。自作カテゴリも追加可能（idとgenerator関数を追加）。</li>
      <li>自己診断で辞書の欠落・矛盾を検知し、上部に警告表示します。</li>
    </ol>
    <p class="help">注：本ツールは一般的な教科書的定義に基づく標準的キーワードで作題しています（流派差は存在します）。</p>
  </section>
</main>

<footer>© 全網羅クイズ｜1ファイル版</footer>
<div id="toast"></div>

<script>
// ====== ベース辞書（一般的な教科書的定義） ======
const DB = {
  signs: [
    {id:'Ar',name:'牡羊',elem:'火',mode:'活動',ruler:'火星',modern:null,exalt:'太陽',detr:'金星',fall:'土星',kw:'速い/直感/先駆け'},
    {id:'Ta',name:'牡牛',elem:'地',mode:'不動',ruler:'金星',modern:null,exalt:'月',detr:'火星',fall:'天王星',kw:'安定/感覚/所有'},
    {id:'Ge',name:'双子',elem:'風',mode:'柔軟',ruler:'水星',modern:null,exalt:null,detr:'木星',fall:null,kw:'情報/交換/機転'},
    {id:'Ca',name:'蟹', elem:'水',mode:'活動',ruler:'月',  modern:null,exalt:'木星',detr:'土星',fall:'火星',kw:'保護/共感/家族'},
    {id:'Le',name:'獅子',elem:'火',mode:'不動',ruler:'太陽',modern:null,exalt:'冥王星',detr:'土星',fall:'天王星',kw:'自己表現/誇り/創造'},
    {id:'Vi',name:'乙女',elem:'地',mode:'柔軟',ruler:'水星',modern:null,exalt:'水星',detr:'木星',fall:'金星',kw:'整理/改善/実務'},
    {id:'Li',name:'天秤',elem:'風',mode:'活動',ruler:'金星',modern:null,exalt:'土星',detr:'火星',fall:'太陽',kw:'調和/美/対話'},
    {id:'Sc',name:'蠍', elem:'水',mode:'不動',ruler:'火星',modern:'冥王星',exalt:'海王星',detr:'金星',fall:'月',kw:'深さ/集中/再生'},
    {id:'Sg',name:'射手',elem:'火',mode:'柔軟',ruler:'木星',modern:null,exalt:null,detr:'水星',fall:null,kw:'拡大/探究/自由'},
    {id:'Cp',name:'山羊',elem:'地',mode:'活動',ruler:'土星',modern:null,exalt:'火星',detr:'月',fall:'木星',kw:'現実/規律/達成'},
    {id:'Aq',name:'水瓶',elem:'風',mode:'不動',ruler:'土星',modern:'天王星',exalt:'水星',detr:'太陽',fall:'海王星',kw:'革新/客観/独立'},
    {id:'Pi',name:'魚',  elem:'水',mode:'柔軟',ruler:'木星',modern:'海王星',exalt:'金星',detr:'水星',fall:'水星',kw:'共感/想像/融合'}
  ],
  planets: [
    {id:'Sun',name:'太陽',kw:'目的・意思'},
    {id:'Moon',name:'月',kw:'感情・気分'},
    {id:'Mercury',name:'水星',kw:'思考・伝達'},
    {id:'Venus',name:'金星',kw:'愛・喜び'},
    {id:'Mars',name:'火星',kw:'行動・闘志'},
    {id:'Jupiter',name:'木星',kw:'拡大・発展'},
    {id:'Saturn',name:'土星',kw:'制限・成熟'},
    {id:'Uranus',name:'天王星',kw:'革新・解放'},
    {id:'Neptune',name:'海王星',kw:'霧・夢・境界の希薄化'},
    {id:'Pluto',name:'冥王星',kw:'再生・極性'}
  ],
  houses: [
    {no:1, kw:'自我・第一印象・出方'}, {no:2, kw:'資質・価値・収入'},
    {no:3, kw:'情報・学習・近距離'}, {no:4, kw:'家庭・基盤・根'},
    {no:5, kw:'創造・恋愛・遊び'}, {no:6, kw:'習慣・義務・健康'},
    {no:7, kw:'対人・契約・パートナー'}, {no:8, kw:'共有資源・結びつき・変容'},
    {no:9, kw:'理想・高等教育・遠方'}, {no:10,kw:'到達点・社会的立場'},
    {no:11,kw:'友人・共同体・未来'}, {no:12,kw:'無意識・秘め事・癒し'}
  ],
  aspects: [
    {id:'Conj', name:'コンジャンクション（合）',deg:0,sym:'☌'},
    {id:'Opp',  name:'オポジション（衝）',deg:180,sym:'☍'},
    {id:'Square',name:'スクエア（矩）',deg:90,sym:'□'},
    {id:'Trine', name:'トライン（拱）',deg:120,sym:'△'},
    {id:'Sextile',name:'セクスタイル（六分）',deg:60,sym:'⚹'},
    {id:'Qnx',  name:'クインカンクス（150°）',deg:150,sym:'⚵'}
  ],
  // オーブ（目安：流派差あり。ここは標準的目安）
  orbs: { Conj:8, Opp:8, Square:6, Trine:6, Sextile:4, Qnx:3 }
};

// ====== カテゴリとジェネレーター ======
const CATS = [
  {id:'planets_basic', name:'惑星の意味（基礎）'},
  {id:'signs_basic',   name:'サインの基礎（元素/三区分/支配星）'},
  {id:'houses_basic',  name:'ハウスの基礎'},
  {id:'aspects_basic', name:'アスペクトの基礎（名称/記号/角度）'},
  // 自動生成：全組み合わせ
  {id:'pxs', name:'天体×サイン（全組合せ）'},
  {id:'pxh', name:'天体×ハウス（全組合せ）'},
  {id:'aspect_degree', name:'度数→アスペクト判定（オーブ込）'}
];

// ====== ユーティリティ ======
const el = s=>document.querySelector(s);
const els = s=>document.querySelectorAll(s);
const rand = n=>Math.floor(Math.random()*n);
const pick = (arr,n)=>arr.slice().sort(()=>Math.random()-0.5).slice(0,n);
const toast = m=>{const t=el('#toast');t.textContent=m;t.classList.add('show');setTimeout(()=>t.classList.remove('show'),1600)};

const LSK = { SCORE:'aqp_score', WRONG:'aqp_wrong' };
const loadWrong = ()=>new Set(JSON.parse(localStorage.getItem(LSK.WRONG)||'[]'));
const saveWrong = id=>{const s=loadWrong();s.add(id);localStorage.setItem(LSK.WRONG',JSON.stringify([...s]))};

// ====== 自己診断（辞書欠落・矛盾チェック） ======
function selfCheck(){
  const warn=[]; // signs
  const signIds=new Set(DB.signs.map(s=>s.id));
  if(signIds.size!==12) warn.push('サインが12個ではありません');
  if(DB.planets.length<7) warn.push('惑星が少なすぎます（最低7）');
  const houseNos=new Set(DB.houses.map(h=>h.no));
  for(let i=1;i<=12;i++){ if(!houseNos.has(i)) warn.push(`ハウス${i}がありません`); }
  // 品位キーの存在
  DB.signs.forEach(s=>{
    if(!('elem'in s&&'mode'in s&&'ruler'in s)) warn.push(`サイン定義欠落: ${s.name}`);
  });
  const w = el('#warn');
  if(warn.length){ w.style.display='block'; w.textContent='⚠ 自己診断：'+warn.join(' / '); }
  else { w.style.display='none'; }
}
selfCheck();

// ====== 問題ジェネレーター ======
function gen_planets_basic(){
  const qs=[];
  DB.planets.forEach(p=>{
    const wrong = pick(DB.planets.filter(x=>x.id!==p.id).map(x=>x.kw),3);
    const choices = [p.kw,...wrong].sort(()=>Math.random()-0.5);
    const a = choices.indexOf(p.kw);
    qs.push({
      id:`pb-${p.id}`, cat:'planets_basic',
      q:`${p.name}の基本キーワードはどれ？`,
      choices, a,
      exp:`${p.name}＝${p.kw}。`
    });
  });
  return qs;
}

function gen_signs_basic(){
  const qs=[];
  DB.signs.forEach(s=>{
    // 元素
    const elems=['火','地','風','水'];
    const wrongE = pick(elems.filter(e=>e!==s.elem),3);
    const chE = [s.elem,...wrongE].sort(()=>Math.random()-0.5);
    qs.push({id:`sb-elem-${s.id}`,cat:'signs_basic',q:`${s.name}の元素は？`,choices:chE,a:chE.indexOf(s.elem),exp:`${s.name}の元素＝${s.elem}。`});
    // 三区分
    const modes=['活動','不動','柔軟'];
    const wrongM = pick(modes.filter(m=>m!==s.mode),3);
    const chM = [s.mode,...wrongM].sort(()=>Math.random()-0.5);
    qs.push({id:`sb-mode-${s.id}`,cat:'signs_basic',q:`${s.name}の三区分は？`,choices:chM,a:chM.indexOf(s.mode),exp:`${s.name}は${s.mode}宮。`});
    // 支配星（モダンがあれば「（伝統）/（モダン）」の双方を説明）
    const rul = s.ruler + (s.modern?`（モダン：${s.modern}）`:'');
    const allR = [...new Set(DB.planets.map(p=>p.name))];
    const wrongR = pick(allR.filter(x=>x!==s.ruler),3);
    const chR = [s.ruler,...wrongR].sort(()=>Math.random()-0.5);
    qs.push({id:`sb-ruler-${s.id}`,cat:'signs_basic',q:`${s.name}の支配星（伝統）は？`,choices:chR,a:chR.indexOf(s.ruler),exp:`${s.name}の支配星＝${rul}。`});
  });
  return qs;
}

function gen_houses_basic(){
  const qs=[];
  DB.houses.forEach(h=>{
    const correct=h.kw;
    const wrong=pick(DB.houses.filter(x=>x.no!==h.no).map(x=>x.kw),3);
    const ch=[correct,...wrong].sort(()=>Math.random()-0.5);
    qs.push({id:`hb-${h.no}`,cat:'houses_basic',q:`第${h.no}ハウスの主なテーマは？`,choices:ch,a:ch.indexOf(correct),exp:`第${h.no}ハウス＝${correct}。`});
  });
  return qs;
}

function gen_aspects_basic(){
  const qs=[];
  // 名称→度数
  DB.aspects.forEach(a=>{
    const wrong = pick(DB.aspects.filter(x=>x.id!==a.id).map(x=>x.deg+'°'),3);
    const ch = [`${a.deg}°`,...wrong].sort(()=>Math.random()-0.5);
    qs.push({id:`ab-deg-${a.id}`,cat:'aspects_basic',q:`${a.name}の度数は？`,choices:ch,a:ch.indexOf(`${a.deg}°`),exp:`${a.name}＝${a.deg}°。`});
  });
  // 記号→名称
  DB.aspects.forEach(a=>{
    const wrong = pick(DB.aspects.filter(x=>x.id!==a.id).map(x=>x.name),3);
    const ch=[a.name,...wrong].sort(()=>Math.random()-0.5);
    qs.push({id:`ab-sym-${a.id}`,cat:'aspects_basic',q:`この記号「${a.sym}」は何？`,choices:ch,a:ch.indexOf(a.name),exp:`${a.sym}＝${a.name}。`});
  });
  return qs;
}

// 天体×サイン（全12×全惑星）
function gen_pxs(){
  const qs=[];
  DB.planets.forEach(p=>{
    DB.signs.forEach(s=>{
      const stem = `${p.name}が${s.name}にある時、最も近い傾向は？`;
      // 正答＝惑星キーワード×サインKW（平易に合成）
      const correct = `${p.kw}を${s.kw.replace(/\//g,'・')}のノリで表す`;
      // 誘導肢：他元素サインのKWなど
      const wrong = pick(DB.signs.filter(x=>x.id!==s.id).map(x=>`${p.kw}を${x.kw.replace(/\//g,'・')}で表す`),3);
      const ch=[correct,...wrong].sort(()=>Math.random()-0.5);
      qs.push({id:`pxs-${p.id}-${s.id}`,cat:'pxs',q:stem,choices:ch,a:ch.indexOf(correct),
        exp:`${p.name}（${p.kw}）×${s.name}（${s.kw}）＝「${p.kw}を${s.kw}で表現」。`});
    });
  });
  return qs;
}

// 天体×ハウス（全12×全惑星）
function gen_pxh(){
  const qs=[];
  DB.planets.forEach(p=>{
    DB.houses.forEach(h=>{
      const stem = `${p.name}が第${h.no}ハウスにある時の要点は？`;
      const correct = `${p.kw}が「${h.kw}」の領域で表れやすい`;
      const wrong = pick(DB.houses.filter(x=>x.no!==h.no).map(x=>`${p.kw}が「${x.kw}」で表れる`),3);
      const ch=[correct,...wrong].sort(()=>Math.random()-0.5);
      qs.push({id:`pxh-${p.id}-${h.no}`,cat:'pxh',q:stem,choices:ch,a:ch.indexOf(correct),
        exp:`${p.name}（${p.kw}）＠第${h.no}＝${h.kw}で発現。`});
    });
  });
  return qs;
}

// 度数→アスペクト判定（オーブ込み）
function nearestAspect(d){
  // dは0-180の差に正規化
  const deg = Math.min(d,360-d);
  let best=null, bestDiff=1e9, bestId=null;
  DB.aspects.forEach(a=>{
    const diff=Math.abs(deg-a.deg);
    const orb=DB.orbs[a.id]||0;
    if(diff<=orb && diff<bestDiff){ bestDiff=diff; best=a; bestId=a.id; }
  });
  return best; // or null
}
function gen_aspect_degree(){
  const qs=[];
  for(let i=0;i<120;i++){ // バリエーション十分
    const a = DB.aspects[rand(DB.aspects.length)];
    const orb = DB.orbs[a.id];
    // オーブ内のランダム度数を作成
    const deg = Math.max(0, a.deg + (rand(orb*2+1)-orb));
    const stem = `2天体の度数差が約${deg}°の時、最も近いアスペクトは？（目安オーブ内）`;
    const correct = a.name;
    const wrong = pick(DB.aspects.filter(x=>x.id!==a.id).map(x=>x.name),3);
    const ch = [correct,...wrong].sort(()=>Math.random()-0.5);
    qs.push({id:`ad-${a.id}-${i}`,cat:'aspect_degree',q:stem,choices:ch,a:ch.indexOf(correct),
      exp:`約${deg}°は「${a.name}（${a.deg}°）」のオーブ内。`});
  }
  return qs;
}

// ====== 問題プールの構築 ======
function buildAllQuestions(){
  return [
    ...gen_planets_basic(),
    ...gen_signs_basic(),
    ...gen_houses_basic(),
    ...gen_aspects_basic(),
    ...gen_pxs(),
    ...gen_pxh(),
    ...gen_aspect_degree()
  ];
}
let ALL = buildAllQuestions();

// ====== UI 構築 ======
function buildCats(){
  const box = el('#catBox'); box.innerHTML='';
  CATS.forEach(c=>{
    const id='cat_'+c.id;
    const label=document.createElement('label'); label.style.marginRight='12px';
    label.innerHTML=`<input type="checkbox" id="${id}" data-id="${c.id}" checked> ${c.name}`;
    box.appendChild(label);
  });
  el('#saved').textContent = Number(localStorage.getItem(LSK.SCORE)||0);
  // 概算の生成可能量（カテゴリ全ON時）
  el('#capacity').textContent = ALL.length;
}
buildCats();

// ====== 出題ロジック ======
let pool=[], idx=0, score=0, reviewMode=false, history=[];
function pickByCats(ids, n, onlyWrong=false){
  let list = ALL.filter(q=>ids.includes(q.cat));
  if(onlyWrong){
    const wrong = loadWrong();
    list = list.filter(q=>wrong.has(q.id));
  }
  // シャッフルして上位n
  return list.sort(()=>Math.random()-0.5).slice(0, Math.min(n, list.length));
}

function show(i){
  const q = pool[i];
  el('#tagCat').textContent = CATS.find(c=>c.id===q.cat)?.name || q.cat;
  el('#counter').textContent = `${i+1}/${pool.length}`;
  el('#scoreTag').textContent = `正解 ${score}`;
  el('#question').textContent = q.q;
  const box = el('#choices'); box.innerHTML='';
  q.choices.forEach((ch,ci)=>{
    const div=document.createElement('div'); div.className='choice'; div.textContent=ch;
    div.onclick=()=>{
      if(div.classList.contains('correct')||div.classList.contains('wrong')) return;
      if(ci===q.a){ div.classList.add('correct'); score++; el('#scoreTag').textContent=`正解 ${score}`; }
      else{
        div.classList.add('wrong');
        [...box.children][q.a].classList.add('correct');
        const wrongSet = new Set(JSON.parse(localStorage.getItem(LSK.WRONG)||'[]')); wrongSet.add(q.id);
        localStorage.setItem(LSK.WRONG, JSON.stringify([...wrongSet]));
      }
      el('#explain').style.display='block'; el('#explain').textContent=q.exp;
      history[i].chosen=ci; history[i].correct=(ci===q.a);
      el('#bar').style.width = `${((i+1)/pool.length)*100}%`;
    };
    box.appendChild(div);
  });
  el('#explain').style.display='none';
  el('#bar').style.width = `${(i/pool.length)*100}%`;
}

function start(onlyWrong=false){
  const ids = [...els('#catBox input[type=checkbox]')].filter(x=>x.checked).map(x=>x.dataset.id);
  const n = Number(el('#count').value||20);
  const list = pickByCats(ids,n,onlyWrong);
  if(list.length===0){ toast(onlyWrong?'間違い帳に問題がありません':'該当問題がありません'); return; }
  pool=list; idx=0; score=0; reviewMode=onlyWrong; history=pool.map(q=>({id:q.id,chosen:null,correct:null}));
  el('#quizArea').style.display='block'; el('#resultArea').style.display='none'; show(idx);
}
function finish(){
  el('#quizArea').style.display='none'; el('#resultArea').style.display='block';
  const saved=Number(localStorage.getItem(LSK.SCORE)||0); localStorage.setItem(LSK.SCORE',String(saved+1)); el('#saved').textContent=saved+1;
  el('#resultText').textContent=`正解 ${score}/${pool.length}（${Math.round(score*100/pool.length)}%）｜モード：${reviewMode?'復習':'通常'}`;
  const box=el('#reviewList'); box.innerHTML='';
  pool.forEach((q,i)=>{
    const w=document.createElement('div'); w.className='qcard'; w.style.margin='8px 0';
    w.innerHTML=`<div class="q">${i+1}. ${q.q}</div><div style="margin-top:8px"><b>正解：</b>${q.choices[q.a]}</div><div class="explain" style="margin-top:6px">${q.exp}</div>`;
    box.appendChild(w);
  });
}

// ====== イベント ======
el('#start').onclick=()=>start(false);
el('#btnReview').onclick=()=>start(true);
el('#resetData').onclick=()=>{ localStorage.removeItem(LSK.SCORE); localStorage.removeItem(LSK.WRONG); el('#saved').textContent='0'; toast('記録をリセットしました'); };
el('#again').onclick=()=>start(reviewMode);
el('#toTop').onclick=()=>{ el('#quizArea').style.display='none'; el('#resultArea').style.display='none'; };
el('#btnGuide').onclick=()=>{ const g=el('#guide'); g.style.display=(g.style.display==='none'?'block':'none'); };
el('#prev').onclick=()=>{ if(idx>0){ idx--; show(idx); } };
el('#next').onclick=()=>{ if(idx<pool.length-1){ idx++; show(idx); } else{ finish(); } };
el('#flag').onclick=()=>{ const id=pool[idx].id; const s=loadWrong(); s.add(id); localStorage.setItem(LSK.WRONG,JSON.stringify([...s])); toast('この問題を間違い帳に保存しました'); };

// ====== 起動時容量表示 ======
(function(){ el('#capacity').textContent = ALL.length; })();
</script>
</body>
</html>
